---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-v15
  namespace: database
#  annotations:
#    kyverno.io/ignore: "true"
spec:
  # using only 1 replica: very difficult to drain the node where postgres is running
  # using more than 1 replica: write amplification issues when leveraging replicated storage (e.g. ceph)
  instances: 2
  imageName: ghcr.io/cloudnative-pg/postgresql:15.2
#  startDelay: 300
#  stopDelay: 300
#  replicationSlots:
#    highAvailability:
#      enabled: true
#    updateInterval: 300
  primaryUpdateStrategy: unsupervised
  storage:
    size: 20Gi
    storageClass: local-path
  superuserSecret:
    name: cloudnative-pg-secret
  postgresql:
#    parameters:
#      max_connections: "300"
#      shared_buffers: 512MB
#      pg_stat_statements.max: '10000'
#      pg_stat_statements.track: all
#      auto_explain.log_min_duration: '10s'
    pg_hba:
      - host all all all scram-sha-256
#      - hostssl all all all scram-sha-256
#    pg_hba:
#      - host all all 192.168.1.0/24 md5
#      - host all all 10.42.0.0/16 md5

#  logLevel: debug
  monitoring:
    enablePodMonitor: true
#  resources:
#    requests:
#      memory: "512Mi"
#      cpu: "1"
#    limits:
#      memory: "4Gi"
#      cpu: "2"
#  nodeMaintenanceWindow:
#    inProgress: false
#    reusePVC: false

#  affinity:
#    tolerations:
#      - key: "arm"
#        operator: "Exists"
  backup:
    retentionPolicy: 30d
    barmanObjectStore:
      wal:
        compression: gzip
        maxParallel: 8
      destinationPath: s3://postgresql/backups/
      endpointURL: "https://nas.${SECRET_DOMAIN}:9009/"
      serverName: postgres-v15
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-secret
          key: aws-secret-access-key
#
##  bootstrap:
##    # use this to recover a net-new cluster from a backup
##    recovery:
##      source: postgres-backup
#
#    ## use this to 'migrate' from an existing cnpg cluster (e.g. "cluster-pg14") to the new cluster
#    #initdb:
#    #  import:
#    #    type: monolith
#    #    databases:
#    #      - "*"
#    #    roles:
#    #      - "*"
#    #    source:
#    #      externalCluster: cluster-pg14
#
#  externalClusters:
#    # this represents the s3 backup to restore from. *nota-bene: the backup must be the same major version of the target cluster
#    - name: postgres-backup
#      barmanObjectStore:
#        wal:
#          compression: gzip
#          maxParallel: 8
#        destinationPath: s3://postgresql/
#        endpointURL: "https://nas.${SECRET_DOMAIN}:9009/"
#        s3Credentials:
#          accessKeyId:
#            name: cloudnative-pg-secret
#            key: aws-access-key-id
#          secretAccessKey:
#            name: cloudnative-pg-secret
#            key: aws-secret-access-key
#
#    # # this represents an existing cnpg cluster to migrate from (e.g. upgrading from postgres v14 to postgres v15)
#    # - name: cluster-pg14
#    #   connectionParameters:
#    #     host: postgres-v15-rw.default.svc.cluster.local
#    #     user: postgres
#    #     dbname: postgres
#    #     sslmode: require
#    #   password:
#    #     name: cloudnative-pg-secret
#    #     key: password
